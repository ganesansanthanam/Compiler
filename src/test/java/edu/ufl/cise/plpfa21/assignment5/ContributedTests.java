package edu.ufl.cise.plpfa21.assignment5;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import edu.ufl.cise.plpfa21.assignment1.CompilerComponentFactory;
import edu.ufl.cise.plpfa21.assignment3.ast.IASTNode;
import edu.ufl.cise.plpfa21.assignment5.CodeGenUtils.DynamicClassLoader;

public class ContributedTests {

	/** Retrieves value of global int variable from loaded classfile.
	 * 
	 * @param testClass
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	static int getInt(Class<?> testClass, String fieldName) throws Exception {
		Field f = testClass.getField(fieldName);
		return f.getInt(null);
	}

	/**
	 * Retrieves value of glboal boolean variable from loaded classfile
	 * 
	 * @param testClass
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	static boolean getBoolean(Class<?> testClass, String fieldName) throws Exception {
		Field f = testClass.getField(fieldName);
		return f.getBoolean(null);
	}

	/**
	 * Retrieves value of global String variable from loaded classfile
	 * @param testClass
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	static String getString(Class<?> testClass, String fieldName) throws Exception {
		Field f = testClass.getField(fieldName);
		return (String) f.get(null);
	}

	/**
	 * Retrieves value of global List variable from loaded classfile
	 * 
	 * @param testClass
	 * @param listName
	 * @return
	 * @throws Exception
	 */
	static private Iterable<?> getList(Class<?> testClass, String listName) throws Exception {
		Field f = testClass.getField(listName);
		return (Iterable<?>) f.get(null);
	}

	/**
	 * Generates  a classfile for the given source program.  The classfile has the given name and package.
	 * 
	 * @param input
	 * @param className
	 * @param packageName
	 * @return
	 * @throws Exception
	 */
	byte[] compile(String input, String className, String packageName) throws Exception {
		show(input);
		IASTNode ast = CompilerComponentFactory.getParser(input).parse();
		ast.visit(CompilerComponentFactory.getTypeCheckVisitor(), null);
		show(ast);
		byte[] bytecode = (byte[]) ast.visit(CompilerComponentFactory.getCodeGenVisitor(className, packageName, ""), null);
		show(CodeGenUtils.bytecodeToString(bytecode));
		return bytecode;
	}


	/**
	 * Executes indicated method defined in bytecode and returns the result. args is
	 * an Object[] containing the parameters of the method, or may be null if the
	 * method does not have parameters.
	 * 
	 * Requires that the given method is not overloaded in the class file.
	 * 
	 * @param bytecode
	 * @param className
	 * @param methodName
	 * @param args
	 * @return
	 * @throws Exception
	 */
	Object loadClassAndRunMethod(byte[] bytecode, String className, String methodName, Object[] args) throws Exception {
		Class<?> testClass = getClass(bytecode, className);
		return runMethod(testClass,methodName, args);
	}

	private Method findMethod(String name, Method[] methods) {
		for (Method m : methods) {
			String methodName = m.getName();
			if (name.equals(methodName))
				return m;
		}
		throw new RuntimeException("Method " + name + " not found in generated bytecode");
	}

	Class<?> getClass(byte[] bytecode, String className) throws Exception {
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		return testClass;
	}


	Object runMethod(Class<?> testClass, String methodName, Object[] args) throws Exception {
		Method[] methods = testClass.getDeclaredMethods();
		Method m = findMethod(methodName, methods);
		return m.invoke(null, args);
	}

	

//	@BeforeAll
//	public static void beforeAll() throws FileNotFoundException {
//		out = new PrintStream(new BufferedOutputStream(new FileOutputStream("hw5Errors.txt")));
//	}
//
//	@AfterAll
//	public static void afterAll() {
//		out.close();
//	}

	static PrintStream out = System.out;

	static boolean VERBOSE = true;
	void show(Object o) {
		if (VERBOSE) {
			System.out.println(o);
		}
	}

	static final String className = "TestClass";
	static final String packageName = "edu.ufl.cise.plpfa21.tests";

	@DisplayName("ganesan_santhanam_test1")
	@Test
	public void ganesan_santhanam_test1(TestInfo testInfo) throws Exception {
		String input = """
					VAR i = 0;
					VAR end = 10;
					VAR by = 2;
					FUN a():STRING
					DO
						WHILE i < end
						DO
				     		i = i + by;
				     	END
						IF i==end
						DO
							RETURN "EVEN";
						END
						RETURN "ODD";
					END
					""";
		byte[] bytecode = compile(input, className, packageName);
		show(CodeGenUtils.bytecodeToString(bytecode));
		Object[] params = { };
		String result = (String) loadClassAndRunMethod(bytecode, className, "a", params);
		assertEquals("EVEN", result);
	}

	@DisplayName("ganesan_santhanam_test2")
	@Test
	public void ganesan_santhanam_test2(TestInfo testInfo) throws Exception {
		String input = """
					FUN a(name:STRING,i:INT):STRING
					DO
						IF i==0
						DO
							RETURN "HELLO " + name;
						END
						RETURN  "BYE" + name;
					END
					""";
		byte[] bytecode = compile(input, className, packageName);
		show(CodeGenUtils.bytecodeToString(bytecode));
		Object[] params = { "Ganesh", 0 };
		String result = (String) loadClassAndRunMethod(bytecode, className, "a", params);
		assertEquals("HELLO Ganesh", result);
	}

	@DisplayName("ganesan_santhanam_test3")
	@Test
	public void ganesan_santhanam_test3(TestInfo testInfo) throws Exception {
		String input = """
					VAR neg = -1;
					FUN a(b:INT): INT
					DO
						IF b<0
						DO
							RETURN neg*b;
						END
					  	RETURN b;
					END
					""";
		byte[] bytecode = compile(input, className, packageName);
		show(CodeGenUtils.bytecodeToString(bytecode));
		Object[] params = { -3 };
		int result = (int) loadClassAndRunMethod(bytecode, className, "a", params);
		assertEquals(3, result);
	}

	@DisplayName("ganesan_santhanam_test4")
	@Test
	public void ganesan_santhanam_test4(TestInfo testInfo) throws Exception {
		String input = """
					VAR end = 25;
					VAR i = 1;
					FUN a(): STRING
					DO
						WHILE i < end
						DO
				     		IF i*i == end
				     		DO
				     			RETURN "SQUARE";
				     		END
				     		i=i+1;
				     	END
					  	RETURN "NOT SQUARE";
					END
					""";
		byte[] bytecode = compile(input, className, packageName);
		show(CodeGenUtils.bytecodeToString(bytecode));
		Object[] params = { };
		String result = (String) loadClassAndRunMethod(bytecode, className, "a", params);
		assertEquals("SQUARE", result);
	}

	@DisplayName("ganesan_santhanam_test0")
	@Test
	public void ganesan_santhanam_test5(TestInfo testInfo) throws Exception {
		String input = """
					FUN a(a:INT,b:INT,c:INT): INT
					DO
						WHILE c<b
						DO
							a = a * c;
							c = c + 1;
						END
					   RETURN a;
					END
					""";
		byte[] bytecode = compile(input, className, packageName);
		show(CodeGenUtils.bytecodeToString(bytecode));
		Object[] params = { 1,5,2 };
		int result = (int) loadClassAndRunMethod(bytecode, className, "a", params);
		assertEquals(24, result);
	}
}